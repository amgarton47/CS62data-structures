1. (a) Describe the time-to-add performance results between the sorted and 
       un-sorted linear-list implementations

 	99.32      2.23     2.23  1000000     2.23     2.23  linear_add

 	99.79      3.55     3.55  1000000     3.55     3.55  sorted_add

   	linear unsorted add was measured to be 2.2us/call
	linear sorted add was measured to be 3.5 us/call (1.5x slower)
   
   (b) suggest what in the implementations would explain those differences.

	Sorted should be faster on new insertions, but the number
	of references is so much greater than the number of words that
	this should not be a major factor.

	It is difficult to see anything in the code that would explain
	such a difference ... but it is likely that linear (where each
	entry is appeneded in allocation order) probably has much better
	cache-line behavior.
	

2. (a) Describe the time-to-add performance results between the linear-list
       and hashed implementations
   
 	99.32      2.23     2.23  1000000     2.23     2.23  linear_add
 	99.79      3.55     3.55  1000000     3.55     3.55  sorted_add

	64.91      1.97     1.97 100002048    19.69    25.15  open_find_entry
	10.07      2.82     0.31 100000000     3.06    28.21  open_add
 	77.38      3.78     3.78 100000000    37.78    45.35  bucket_add

   	linear adds were measured at 2.2-3.5 us/call
	hashed adds were measured at 45-55ns/call (40x faster)

   (b) suggest what in the implementations would explain those differences.
	
	Linear insertions have to search for an average of 1,024 entries
	to find the desired word.

	Bucket hashes have to search through an average of 5 entries, and
	Open hashes probably have a (harder to estimate but vaguly) similar 
	number.


3. (a) Describe the time-to-add performance results between the Open and
       Bucket hahing implementations
   
	64.91      1.97     1.97 100002048    19.69    25.15  open_find_entry
	10.07      2.82     0.31 100000000     3.06    28.21  open_add

 	77.38      3.78     3.78 100000000    37.78    45.35  bucket_add

   	open-hash add was measured at (25+28) 53 ns/call
   	bucket hash add was measured at 45 ns/call (10% faster)

   (b) suggest what in the implementations would explain those differences.
	
	In the base data, the difference is very small.  Differences
	might include:
	    1. bucket_add has to allocate new memory for each add, open_add does not.
	    2. open_add has to make an extra sub-routine call to open_find_entry
	    3. as the table fills up, bucket_add may have shorter searches
