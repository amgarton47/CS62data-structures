package calc;/** * Calculator.java - 1/97 Kim B. Bruce * Revised 3/04.  Revised again 10/17 to incorporate lambda expressions */import java.awt.*;import java.awt.event.*;import javax.swing.*;/** * Application for a simple postfix calculator */public class Calculator extends JFrame {	// Width and height of calculator frame	private static final int CALCULATOR_HEIGHT = 300;	private static final int CALCULATOR_WIDTH = 210;	// size of border around calculator	private static final int BORDER_SIZE = 10;	// gap between successive buttons	protected static final int BUTTON_GAP = 5;	// Display window for calculator	protected JLabel display;	// Array of buttons representing 10 digits	protected JButton[] digitButton;	// Buttons to clear display, enter #'s, pop off numbers from run-time stack,	// and arithmetic operation buttons	protected JButton clearButton, enterButton, popButton, multButton,			divButton, addButton, subButton, exchButton;	// Object w/memory of computation in progress	protected State calcState;	/**	 * post: Set up calculator panel w/buttons and added it to applet	 */	public Calculator() {		super("Postfix Calculator");		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		Container contentPane = getContentPane();		JPanel calcPanel = new JPanel();		// lay out 6 rows w/1 column each		calcPanel.setLayout(new GridLayout(6, 1, BUTTON_GAP, BUTTON_GAP));		// create border around calcPanel		calcPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_SIZE,				BORDER_SIZE, BORDER_SIZE, BORDER_SIZE));		display = new JLabel("0", JLabel.RIGHT); // display is		// right-justified		display.setBorder(BorderFactory.createLoweredBevelBorder());		calcPanel.add(display); // display occupies first row		calcState = new State(display);		JPanel topPanel = new JPanel(); // Panel for top two rows of calculator		// Lay out one row with 2 cols		topPanel.setLayout(new GridLayout(1, 2, BUTTON_GAP, BUTTON_GAP));		clearButton = new JButton("Clear");		clearButton.addActionListener((ActionEvent evt) -> {calcState.clear();});		topPanel.add(clearButton);  		exchButton = new JButton("Exch");		exchButton.addActionListener((ActionEvent evt) -> {calcState.exchange();});		topPanel.add(exchButton);		divButton = new JButton("/");		divButton.addActionListener(new OpButtonListener("/", calcState));		topPanel.add(divButton);		calcPanel.add(topPanel);		JPanel midPanel;		// Set up all buttons to enter digits		digitButton = new JButton[BORDER_SIZE];		for (int row = 0; row < 3; row++) {			midPanel = new JPanel();			midPanel.setLayout(new GridLayout(1, 4, BUTTON_GAP, BUTTON_GAP));			for (int col = 0; col < 3; col++) {				int digit = (2 - row) * 3 + col + 1;				digitButton[digit] = new JButton("" + digit);				digitButton[digit].addActionListener(new DigitButtonListener(						digit, calcState));				midPanel.add(digitButton[digit]);			}			switch (row) { // Put a different operator at end of each row			case 0:				multButton = new JButton("*");				multButton.addActionListener(new OpButtonListener("*",						calcState));				midPanel.add(multButton);				break;			case 1:				addButton = new JButton("+");				addButton						.addActionListener(new OpButtonListener("+", calcState));				midPanel.add(addButton);				break;			case 2:				subButton = new JButton("-");				subButton.addActionListener(new OpButtonListener("-", calcState));				midPanel.add(subButton);				break;			}			calcPanel.add(midPanel);		}		JPanel bottomPanel = new JPanel();		bottomPanel.setLayout(new GridLayout(1, 3, BUTTON_GAP, BUTTON_GAP));		popButton = new JButton("Pop");		popButton.addActionListener((ActionEvent evt) ->{calcState.pop();});		bottomPanel.add(popButton);		digitButton[0] = new JButton("" + 0);		digitButton[0].addActionListener(new DigitButtonListener(0, calcState));		bottomPanel.add(digitButton[0]);		enterButton = new JButton("Enter");		enterButton.addActionListener((ActionEvent evt) -> {calcState.enter();});		bottomPanel.add(enterButton);		calcPanel.add(bottomPanel);		// Default layout for Frames is BorderLayout.		// Adds calcPanel in center of Frame.		contentPane.add(calcPanel, BorderLayout.CENTER);		setSize(CALCULATOR_WIDTH, CALCULATOR_HEIGHT);		contentPane.validate();	}	// Create and show Calculator so it can respond to events	public static void main(String[] args) {		Calculator myCalc = new Calculator();		myCalc.setVisible(true);	}}