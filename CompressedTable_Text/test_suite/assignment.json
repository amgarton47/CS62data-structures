{
  "title": "Compressed Table Assignment",
  "assignment": "assignment4",
  "info": "Might need to update rubric below if grading in two phases.",
    "runner": {
        "mainclass": "GridTest",
        "package": "compression",
        "type": "java_single_package_runner"
    },
    "max_score": 17,
    "tests": [
      {
        "name": "testIsOffRight(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testIsOffRight",
        "score": 0.1
      },
      {
        "name": "testAddFirstNull(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddFirstNull",
        "score": 0.1
      },
      {
        "name": "testCurrentValueEmptyList(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testCurrentValueEmptyList",
        "score": 0.1
      },
      {
        "name": "testAddAfterCurrentNull(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddAfterCurrentNull",
        "score": 0.1
      },
      {
        "name": "testNextOffRightSide(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testNextOffRightSide",
        "score": 0.1
      },
      {
        "name": "testRemoveCurrentIsOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveCurrentIsOff",
        "score": 0.1
      },
      {
        "name": "testRemoveCurrentEmpty(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveCurrentEmpty",
        "score": 0.1
      },
      {
        "name": "testFirstOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testFirstOff",
        "score": 0.1
      },
      {
        "name": "testCurrentValueIsOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testCurrentValueIsOff",
        "score": 0.1
      },
      {
        "name": "testRemoveLast(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveLast",
        "score": 0.1
      },
      {
        "name": "testRemoveCurrent(compression.Autograder)",        
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveCurrent",
        "score": 0.1
      },
      {
        "name": "testGetLast(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testGetLast",
        "score": 0.1
      },
      {
        "name": "testAddFirst(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddFirst",
        "score": 0.1
      },
      {
        "name": "testLastOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testLastOff",
        "score": 0.1
      },
      {
        "name": "testBackOffLeftSide(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testBackOffLeftSide",
        "score": 0.1
      },
      {
        "name": "testAddAfterCurrent(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddAfterCurrent",
        "score": 0.1
      },
      {
        "name": "testRemoveFirst(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveFirst",
        "score": 0.1
      },
      {
        "name": "testNext(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testNext",
        "score": 0.1
      },
      {
        "name": "testLast(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testLast",
        "score": 0.1
      },
      {
        "name": "testNextEmptyList(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testNextEmptyList",
        "score": 0.1
      },
      {
        "name": "testIsOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testIsOff",
        "score": 0.1
      },
      {
        "name": "testFirst(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testFirst",
        "score": 0.1
      },
      {
        "name": "testClear(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testClear",
        "score": 0.1
      },
      {
        "name": "testCurDoublyLinkedList(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testCurDoublyLinkedList",
        "score": 0.1
      },
      {
        "name": "testAddAfterCurrentIsOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddAfterCurrentIsOff",
        "score": 0.1
      },
      {
        "name": "testAddLastNull(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddLastNull",
        "score": 0.1
      },
      {
        "name": "testIsOffLeft(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testIsOffLeft",
        "score": 0.1
      },
      {
        "name": "testAddLast(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddLast",
        "score": 0.1
      },
      {
        "name": "testGetFirst(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testGetFirst",
        "score": 0.1
      },
      {
        "name": "testCurrentValue(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testCurrentValue",
        "score": 0.1
      },
      {
        "name": "testBackEmptyList(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testBackEmptyList",
        "score": 0.1
      },
      {
        "name": "testRemoveLastAfterOffLeft(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveLastAfterOffLeft",
        "score": 0.1
      },
      {
        "name": "testFirstEmpty(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testFirstEmpty",
        "score": 0.1
      },
      {
        "name": "testBack(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testBack",
        "score": 0.1
      },
      {
        "name": "testGetLastAfterOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testGetLastAfterOff",
        "score": 0.1
      },
      {
        "name": "testAddFirstAfterOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testAddFirstAfterOff",
        "score": 0.1
      },
      {
        "name": "testFirstOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testFirstOff",
        "score": 0.1
      },
      {
        "name": "testRemoveFirstAfterOffLeft(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testRemoveFirstAfterOffLeft",
        "score": 0.1
      },
      {
        "name": "testLastEmpty(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testLastEmpty",
        "score": 0.1
      },
      {
        "name": "testGetFirstAfterOff(compression.Autograder)",
        "descr":"Passes JUnit tests for all methods in CurDoublyLinkedList: testGetFirstAfterOff",
        "score": 0.1
      },
      {
        "name": "testFutileChange(compression.Autograder)",
        "descr": "No change if new color is same as current color: testFutileChange",
        "score": 1.0
      },
      {
        "name": "testSecondChangeToFirstNode(compression.Autograder)",
        "descr": "Change color of position already in list: testSecondChangeToFirstNode",
        "score": 0.6
      },
      {
        "name": "testUpdateAtEnd(compression.Autograder)",
        "descr": "Change color of position already in list: testUpdateAtEnd",
        "score": 0.7
      },
      {
        "name": "testChangeIntermediateNode(compression.Autograder)",
        "descr": "Change color of position already in list: testChangeIntermediateNode",
        "score": 0.7
      },
      {
        "name": "testChangeLastNode(compression.Autograder)",
        "descr": "Change color of position not already in list: testChangeLastNode",
        "score": 1.0
      },
      {
        "name": "testReadMeExample(compression.Autograder)",
        "descr": "Change color of position not already in list: testReadMeExample",
        "score": 1.0
      },
      {
        "name": "testSequentialUpdates(compression.Autograder)",
        "descr": "Correctly adds second node to list when needed: testSequentialUpdates",
        "score": 0.5
      },
      {
        "name": "testMultipleChanges(compression.Autograder)",
        "descr": "Correctly adds second node to list when needed: testMultipleChanges",
        "score": 0.5
      },
      {
        "name": "testChangeToFirstNode(compression.Autograder)",
        "descr": "Correctly adds second node to list when needed: testChangeToFirstNode",
        "score": 0.5
      },
      {
        "name": "testAddIntermediateNode(compression.Autograder)",
        "descr": "Correctly adds second node to list when needed: testAddIntermediateNode",
        "score": 0.5
      },
      {
        "name": "testSimpleContraction(compression.Autograder)",
        "descr": "Correctly shrinks list: testSimpleContraction",
        "score": 0.5
      },
      {
        "name": "testIntermediateContraction(compression.Autograder)",
        "descr": "Correctly shrinks list: testIntermediateContraction",
        "score": 0.5
      },
      {
        "name": "testSequentialContraction(compression.Autograder)",
        "descr": "Correctly shrinks list: testSequentialContraction",
        "score": 0.5
      },
      {
        "name": "testContractionEnd(compression.Autograder)",
        "descr": "Correctly shrinks list: testContractionEnd",
        "score": 0.5
      },

      {
        "name": "testInitialOutput()(compression.Autograder)",
        "descr": "General correctness: testInitialOutput()",
        "score": 0.5
      },
      {
        "name": "testInitialCurDLL()(compression.Autograder)",
        "descr": "General correctness: testInitialCurDLL()",
        "score": 0.5
      },
      {
        "name": "General correctness",
        "score": 1
      },
      {
        "name": "Appropriate comments (including JavaDoc)",
        "score": 1.0
      },
      {
        "name": "Style and formatting",
        "score": 1.0
      }
    ]
}
