/** * Frequency List of word/# of occurrence pairs * @author Kim Bruce * @version 2/08, revised 1/11 */import java.util.ArrayList;import java.util.List;import structure5.Association;public class FreqList {	// list of associations holding words and their frequencies	protected List<Association<String, Integer>> flist;		// total # of instances of words held in list	protected int totalOccurrences;		/**	 *  Create empty list of word frequencies	 */	public FreqList() {		totalOccurrences = 0;		flist = new ArrayList<Association<String, Integer>>();	}	/**	 * @param word  the word to be tallied in frequency list	 *  post: if word was not in frequency list it is added w/ 	 *  frequency of 1. 	 *  If already in, then increase frequency by 1	 */	public void add(String word) {		Association<String, Integer> assoc = new Association<String, Integer>(				word, 0); // Association w/ word		int wordNo = flist.indexOf(assoc); // location of word in list		if (wordNo == -1) { // word was not in list, insert it			assoc.setValue(1);			flist.add(assoc);		} else { // word was in list, bump frequency			Association<String, Integer> element = flist.get(wordNo);			int newValue = element.getValue() + 1;			element.setValue(newValue);		}		totalOccurrences++;	}	/**	 * @param prob  probability chosen	 * @return Return a letter chosen randomly from the letters 	 *  in the frequency list. The probability of a letter being 	 *  chosen if proportional to its frequency stored in the list.	 */	public String get(double prob) {		int count = 0; // sum of frequencies seen so far		// number between 0 and size of list - 1 (inclusive)		int target = (int) Math.round(prob * (totalOccurrences - 1));		// letter, frequency pairs from list		Association<String, Integer> element = null; 				for (int letterNo = 0; count <= target && letterNo < flist.size(); letterNo++) {			// search until count exceeds random target			element = flist.get(letterNo);			// frequency of elt			int probOfElt = element.getValue();			count = count + probOfElt;		}		return element.getKey();	}		/**	 * @return readable representation of the frequency table	 */	public String toString() {		StringBuilder rep = new StringBuilder();		rep.append("Frequency List: ");		for(Association<String, Integer> elt:flist){			rep.append(elt);		}		return rep.toString();	}	// class to test	public static void main(String args[]) {		FreqList list = new FreqList();		WordStream ws = new WordStream();		String testString = "This is a test, to see if this is anything that is working.";		ws.addLexItems(testString.toLowerCase());		while(ws.hasMoreTokens()) {			list.add(ws.nextToken());		}		System.out.println(list.toString());		System.out.println(list.totalOccurrences);		// Pick some Strings w/ carefully chosen "random" numbers to make		// sure "get" works properly. 		System.out.println(list.get(0.1));		System.out.println(list.get(1.0));		System.out.println(list.get(0.5));		System.out.println("Done");	}}